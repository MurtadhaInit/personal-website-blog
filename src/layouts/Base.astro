---
import "@styles/globals.css";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import { ViewTransitions } from "astro:transitions";

interface Props {
  title?: string;
  description?: string;
}

const { title = "Murtadha", description = "My personal website and blog" } =
  Astro.props as Props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link
      rel="alternate"
      type="application/rss+xml"
      title="Murtadha's Blog"
      href={new URL("rss.xml", Astro.site)}
    />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="icon" type="image/svg+xml" href="./favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body class="bg-theme-light-fill dark:bg-theme-dark-fill">
    <Header />

    <slot>Oops, this page seems to be empty...</slot>

    <Footer />
  </body>
</html>

<script>
  // -- theme settings --
  document.addEventListener("astro:page-load", () => {
    function getThemePref(): "dark" | "light" {
      // return the current theme, if it's set in local storage
      const currentTheme = localStorage.getItem("theme");
      if (currentTheme && (currentTheme === "dark" || currentTheme === "light"))
        return currentTheme;

      // or otherwise return the system theme preference
      if (window.matchMedia("(prefers-color-scheme: dark)").matches)
        return "dark";
      return "light";
    }

    function reflectThemePref(theme: "dark" | "light"): void {
      theme === "dark"
        ? document.documentElement.classList.add("dark")
        : document.documentElement.classList.remove("dark");

      const toggleThemeButton = document.getElementById("theme-btn");
      toggleThemeButton?.setAttribute(
        "aria-label",
        `Switch to ${theme === "dark" ? "light" : "dark"} theme`,
      );
    }

    reflectThemePref(getThemePref());

    // listen to theme toggle button for manual changes
    document.getElementById("theme-btn")?.addEventListener("click", () => {
      // flip the currently selected theme
      const theme = getThemePref() === "dark" ? "light" : "dark";
      localStorage.setItem("theme", theme);
      reflectThemePref(theme);
    });

    // sync with system preference changes
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", ({ matches: isDark }) => {
        const systemTheme = isDark ? "dark" : "light";
        const setTheme = localStorage.getItem("theme");
        // if theme was not manually set, reflect change
        if (!setTheme) reflectThemePref(systemTheme);
      });
  });
</script>
