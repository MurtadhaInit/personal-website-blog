---
import { filterPosts, getRelatedPosts } from "@utils/utils";

import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";

interface Props {
  originalPost: CollectionEntry<"blog">;
  postsToDisplay: number;
}

const { originalPost, postsToDisplay } = Astro.props as Props;

const allPosts = await getCollection("blog");
const filteredPosts = filterPosts(allPosts);
// generate related posts and sort the results descendingly by their score
let relatedPosts = getRelatedPosts(originalPost, filteredPosts).sort(
  (a, b) => b.score - a.score,
);
// display the top specified number of related posts
if (postsToDisplay) {
  relatedPosts = relatedPosts.slice(0, postsToDisplay);
}
---

<ul class="flex flex-wrap items-start justify-start gap-4">
  {
    relatedPosts.length !== 0 &&
      relatedPosts.map((mapping) => (
        <li>
          <a
            href={`/blog/${mapping.post.id}`}
            class="group block rounded-lg bg-theme-light-fill-muted p-4 text-theme-light-text-muted dark:bg-theme-dark-fill-muted dark:text-theme-dark-text-muted"
          >
            <h3 class="transition group-hover:text-theme-light-accent group-hover:dark:text-theme-dark-accent md:text-lg">
              {mapping.post.data.title}
            </h3>
            <small>{mapping.post.data.date.toLocaleDateString()}</small>
          </a>
        </li>
      ))
  }
</ul>
